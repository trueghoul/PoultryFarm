//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace courseproject.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class factoryEntities : DbContext
    {
        public factoryEntities()
            : base("name=factoryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Доходы_и_расходы> Доходы_и_расходы { get; set; }
        public virtual DbSet<Заказы> Заказы { get; set; }
        public virtual DbSet<Клиенты> Клиенты { get; set; }
        public virtual DbSet<Объекты> Объекты { get; set; }
        public virtual DbSet<Продукция> Продукция { get; set; }
        public virtual DbSet<Склады> Склады { get; set; }
        public virtual DbSet<Сотрудники> Сотрудники { get; set; }
        public virtual DbSet<Цеха_производства> Цеха_производства { get; set; }
    
        [DbFunction("factoryEntities", "GetRole")]
        public virtual IQueryable<GetRole_Result> GetRole(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetRole_Result>("[factoryEntities].[GetRole](@Login, @Password)", loginParameter, passwordParameter);
        }
    
        public virtual int ChangeProduct(Nullable<int> idProd, Nullable<int> number)
        {
            var idProdParameter = idProd.HasValue ?
                new ObjectParameter("IdProd", idProd) :
                new ObjectParameter("IdProd", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeProduct", idProdParameter, numberParameter);
        }
    
        public virtual int ChangeSalary(Nullable<int> idPeople, Nullable<decimal> newSalary)
        {
            var idPeopleParameter = idPeople.HasValue ?
                new ObjectParameter("IdPeople", idPeople) :
                new ObjectParameter("IdPeople", typeof(int));
    
            var newSalaryParameter = newSalary.HasValue ?
                new ObjectParameter("NewSalary", newSalary) :
                new ObjectParameter("NewSalary", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeSalary", idPeopleParameter, newSalaryParameter);
        }
    
        public virtual int IncomeAndExpenses(Nullable<decimal> electricity)
        {
            var electricityParameter = electricity.HasValue ?
                new ObjectParameter("Electricity", electricity) :
                new ObjectParameter("Electricity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncomeAndExpenses", electricityParameter);
        }
    
        public virtual int NewOrder(Nullable<int> idProd, Nullable<int> number, string nameEntity)
        {
            var idProdParameter = idProd.HasValue ?
                new ObjectParameter("IdProd", idProd) :
                new ObjectParameter("IdProd", typeof(int));
    
            var numberParameter = number.HasValue ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(int));
    
            var nameEntityParameter = nameEntity != null ?
                new ObjectParameter("NameEntity", nameEntity) :
                new ObjectParameter("NameEntity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewOrder", idProdParameter, numberParameter, nameEntityParameter);
        }
    }
}
